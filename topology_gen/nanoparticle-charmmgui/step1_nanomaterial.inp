* GENERATED BY CHARMM-GUI (http://www.charmm-gui.org) v3.7 on Aug, 12. 2024. JOBID=2345201065
* GENERATE NANOMATERIAL STRUCTURE AND COORDINATES
*

DIMENS CHSIZE 5000000 MAXRES 5000000 MAXGRP 5000000

! Read topology and parameter files
stream toppar.str


set dir = nanomaterial
!
! Read user's settings
!
stream step1.1_user_input.str
if wulff .eq. on then
    stream wulff_info.str
    calc xbx = @xmax * 2.5
    calc ybx = @ymax * 2.5
    calc zbx = @zmax * 2.5
endif


calc pi = 4.0 * atan (1.0)

! Start with rectangle, then remove to shape
! Requires determining Lx/Ly/Lz for all cases
!
set type = @{material}@{milidx}

!
!shape determination
!
set XTLtype = triclinic

set shape = cube

if impatch .eq. yes set shape = slab

if rsphere .ne. 0 then
   set shape = sphere
   set Rsphere = @Rsphere
   calc xbx   = @Rsphere * 2 + 5
   calc ybx   = @Rsphere * 2 + 5
   calc zbx   = @Rsphere * 2 + 5
endif
!
! reading unit cell
!
stream @dir/@type_unitcell.str
rename segid raw select segid @type end

define junk sele .not. init show end
if ?nsel .gt. 0 stop

calc Nx = int ( @xbx / @UA ) + 1
calc Ny = int ( @ybx / @UB ) + 1
calc Nz = int ( @zbx / @UC ) + 1

if wulff .eq. on then
   calc Nxhalf = @Nx / 2
   calc inxhalf = int( @Nxhalf)
   if Nxhalf .ne. @inxhalf calc Nx = int ( @Nx / 2 + 1 )  * 2
   calc Nyhalf = @Ny / 2
   calc inyhalf = int( @Nyhalf)
   if Nyhalf .ne. @inyhalf calc Ny = int ( @Ny / 2 + 1 )  * 2
   calc Nzhalf = @Nz / 2
   calc inzhalf = int( @Nzhalf)
   if Nzhalf .ne. @inzhalf calc Nz = int ( @Nz / 2 + 1 )  * 2
endif

calc d2r = ?pi / 180
calc gsin =  sin( @gamma * @d2r )
calc bsin =  sin( @beta * @d2r )
calc asin =  sin( @alpha * @d2r )
calc gcos =  cos( @gamma * @d2r )
calc bcos =  cos( @beta * @d2r )
calc acos =  cos( @alpha * @d2r )

calc ax = ( @Nx / 2 ) * @UA
calc bx = ( @Ny / 2 ) * @UB * @{gcos}
calc by = ( @Ny / 2 ) * @UB * @{gsin}
calc cx = ( @Nz / 2 ) * @UC * @{bcos}
calc cy = ( @Nz / 2 ) * @UC
calc cy = @cy * (@acos - @gcos * @bcos) / @gsin
calc cz = @Nz * @UC / @{gsin} * sqrt ( 1 - @{acos} * @{acos} - @{bcos} * @{bcos} - @{gcos} * @{gcos} + 2 * @{acos} * @{bcos} * @{gcos} ) / 2

calc atmx = @ax / @Nx
calc btmx = @bx / @Ny
calc btmy = @by / @Ny
calc ctmx = @cx / @Nz
calc ctmy = @cy / @Nz
calc ctmz = @cz / @Nz

calc orinx = @{ax} + @{bx} + @{cx}
calc oriny = @{by} + @{cy}
calc orinz = @{cz}

calc ucox = @{atmx} + @{btmx} + @{ctmx}
calc ucoy = @{btmy} + @{ctmy}
calc ucoz = @{ctmz}

calc A = @Nx * @UA
calc B = @Ny * @UB * sin( @gamma * @d2r )
calc C = @cz * 2

autogen nopatch
!
! building nanomaterial crystal
! how many unit cells are there along X/Y/Z?
!
calc Nxy = @Nx * @Ny
set iz = 1
label doz
   calc izp = ( @iz - 1 ) * @Nxy
   calc Lz = ( @iz - 1 ) * @UC

    set ix = 1
    label dox
       calc ixyp = @izp + ( @ix - 1 ) * @Ny
       calc Lx = ( @ix - 1 ) * @UA

        set iy = 1
        label doy
            calc Ly = ( @iy - 1 ) * @UB
            calc isum = @ixyp + @iy
            if isum .eq. 1 then
               generate @{type} duplicate raw setup
               coor duplicate select segid raw end select segid @{type} end
            endif
            if isum .gt. 1 then
               generate temp duplicate raw setup
               coor duplicate select segid raw end select segid temp end
               coor stat sele segid temp end
               join @{type} ?SELSEGI renumber
            endif
            ! nanomaterial specific patch(es)
            stream @dir/@type_crystal.str
      increase iy by 1
      if iy .le. @Ny goto doy

   increase ix by 1
   if ix .le. @Nx goto dox

increase iz by 1
if iz .le. @Nz goto doz

!
!delete raw unitcell structure
!
delete atom sele segid raw end

!image patch based on periodicity
if impatch .eq. yes then
   ! Setup PBC (Periodic Boundary Condition)
   crystal define @XTLtype  @A  @B  @C @{alpha} @{beta} @{gamma}
   open unit 10 read card name crystal_image.str
   crystal read unit 10 card
   open read unit 10 card name cubic.img
   read imag unit 10
   nbond ctonnb 2.0 ctofnb 3.0 cutnb 3.0 cutim 3.0 wmin 0.001
   update cutim 8.0 imall
endif

if impatch .eq. no goto skipimpatch

set iz = 1
label doimpz
   calc izp = ( @iz - 1 ) * @Nxy

   set ix = 1
   label doimpx
      calc ixyp = @izp + ( @ix - 1 ) * @NY

      set iy = 1
      label doimpy
         calc isum = @ixyp + @iy
         ! image patch based on periodicity
         stream @dir/@type_impatch.str
      increase iy by 1
      if iy .le. @Ny goto doimpy

   increase ix by 1
   if ix .le. @Nx goto doimpx

increase iz by 1
if iz .le. @Nz goto doimpz

label skipimpatch

if impatch .eq. yes then

   open write card unit 10 name image.psf

   write image psf unit 10
   close unit 10
endif

open write card unit 10 name temp_st1.psf
write psf unit 10 card

open write card unit 10 name temp_st1.crd
write coor unit 10 card

open write card unit 10 name temp_st1.pdb
write coor unit 10 pdb official

!close unit 10
if impatch .eq. yes then
   system "python genimpsf_v2.py temp_st1.psf"
   system "echo $PATH"
   dele atom sele all end
   open read unit 20 card name temp_st1_imc.psf
   read psf  unit 20 card
   open read unit 10 card name temp_st1.crd
   read coor unit 10 card
endif

! edge cutting
! sphere
bomlev -1
if rsphere .ne. 0 then
   coor stat sele all end
   coor trans xdir -@orinx ydir -@oriny zdir -@orinz
   scalar wmain = x
   scalar wmain POW2r
   scalar wmain store 1
   scalar wmain = y
   scalar wmain POW2r
   scalar wmain +store 1
   scalar wmain = z
   scalar wmain POW2r
   scalar wmain +store 1
   scalar wmain recall 1
   scalar wmain sqrt
   scalar wmain show
   define junk select ( prop wmain .gt. @Rsphere ) end
   if ?nsel .gt. 0 delete atom sele junk end
endif

!surface capping of slab or cubic
stream @dir/@type_capping.str
bomlev 0
autogen angles dihedrals


set fname = step1_nanomaterial
set imtname = step1_nanomaterial_imt


if impatch .eq. yes then
   open write card unit 10 name @imtname.psf
   write psf unit 10 card
else
   open write card unit 10 name @fname.psf
   write psf unit 10 card
endif

open write card unit 10 name @fname.crd
write coor unit 10 card

open write card unit 10 name @fname.pdb
write coor unit 10 pdb official

if impatch .eq. yes then
   system "python rmimg_info.py @IMTNAME.psf @FNAME.psf"
   dele atom sele all end
   open read unit 20 card name @fname.psf
   read psf  unit 20 card
   open read unit 10 card name @fname.crd
   read coor unit 10 card
   crystal define @XTLtype  @A  @B  @C @alpha @beta @gamma
   open unit 10 read card name crystal_image.str
   crystal read unit 10 card
   open read unit 10 card name cubic.img
   read imag unit 10
   nbond ctonnb 2.0 ctofnb 3.0 cutnb 3.0 cutim 3.0 wmin 0.001
   update cutim 8.0 imall
   set iz = 1
   label impz2
      calc izp = ( @iz - 1 ) * @Nxy

      set ix = 1
      label impx2
         calc ixyp = @izp + ( @ix - 1 ) * @NY

         set iy = 1
         label impy2
            calc isum = @ixyp + @iy
            ! image patch based on periodicity
            stream @dir/@type_impatch.str
         increase iy by 1
         if iy .le. @Ny goto impy2

      increase ix by 1
      if ix .le. @Nx goto impx2

   increase iz by 1
   if iz .le. @Nz goto impz2

   rename segid NM select all end

   open write card unit 10 name image.psf

   write image psf unit 10
   close unit 10

   open write card unit 10 name @fname.psf
   write psf unit 10 card
endif

!generating psf file for gromacs, namd, openmm
if impatch .eq. yes then
    system "python genimpsf_v2.py @FNAME.psf"
endif

if rsphere .eq. 0 then
    coor stat sele all end
    coor trans xdir -@orinx ydir -@oriny zdir -@orinz
endif

if wulff .eq. on then
   coor stat sele all end
   
   open write unit 90 card name step1_nanomaterial.str
   
   write title unit 90
   * set ncharge = ?cgtot
   * set xcen = ?xave
   * set ycen = ?yave
   * set zcen = ?zave
   * set Nx = @Nx
   * set Ny = @Ny
   * set Nz = @Nz
   * set A = @A
   * set B = @B
   * set C = @C
   * set impatch = @impatch
   *
   open write card unit 10 name init_for_wulff.psf
   write psf unit 10 card

   open write card unit 10 name init_for_wulff.crd
   write coor unit 10 card

   open write card unit 10 name init_for_wulff.pdb
   write coor unit 10 pdb official

   set alpha = 90
   set beta = 90
   set gamma = 90

   write title unit 90
   * set alpha = @alpha
   * set beta = @beta
   * set gamma = @gamma
   *
endif

if wulff .ne. on then
   if pbc .eq. no then
      calc A = int ( @A ) + 1   ! add twice x-water-thickness
      calc B = int ( @B ) + 1   ! add twice y-water-thickness
      calc C = int ( @C ) + 1   ! add twice z-water-thickness
   endif
   if xpbc .eq. yes then
      calc B = int ( @B ) + 1   ! add twice y-water-thickness
      calc C = int ( @C ) + 1   ! add twice z-water-thickness
   endif
   if ypbc .eq. yes then
      calc A = int ( @A ) + 1   ! add twice y-water-thickness
      calc C = int ( @C ) + 1   ! add twice z-water-thickness
   endif
   if zpbc .eq. yes then
      calc B = int ( @B ) + 1   ! add twice y-water-thickness
      calc A = int ( @A ) + 1   ! add twice z-water-thickness
   endif
   if xypbc .eq. yes then
      calc C = int ( @C ) + 1   ! add twice z-water-thickness
   endif
   if xzpbc .eq. yes then
      calc B = int ( @B ) + 1   ! add twice y-water-thickness
   endif
   if yzpbc .eq. yes then
      calc A = int ( @A ) + 1   ! add twice z-water-thickness
   endif


   open write card unit 10 name step1_nanomaterial.psf
   write psf unit 10 card
   open write card unit 10 name step1_nanomaterial.crd
   write coor unit 10 card
   open write card unit 10 name step1_nanomaterial.pdb
   write coor unit 10 pdb official

   close unit 10

   calc cA = @Nx * @Ua
   calc cB = @Ny * @Ub
   calc cC = @Nz * @Uc

   coor stat sele all end

   if alpha .eq. @beta then
      if beta .eq. @gamma then
         set XTLtype = ORTHorhombic
         if A .eq. @B if B .ne. @C set XTLtype = TETRagonal
          if A .eq. @B if A .eq. @C set XTLtype = CUBIc
      else
         if xyzpbc .eq. yes set XTLtype = Triclinic
      endif
   else
      if xyzpbc .eq. yes set XTLtype = Triclinic
   endif


   open write unit 90 card name step1_nanomaterial.str

   write title unit 90
   * set ncharge = ?cgtot
   * set xmax = ?xmax
   * set ymax = ?ymax
   * set zmax = ?zmax
   * set xmin = ?xmin
   * set ymin = ?ymin
   * set zmin = ?zmin
   * set xcen = ?xave
   * set ycen = ?yave
   * set zcen = ?zave
   * set boxtype = rect
   * set Nx = @Nx
   * set Ny = @Ny
   * set Nz = @Nz
   * set impatch = @impatch
   *

   if solv .eq. yes then
       set alpha = 90
       set beta = 90
       set gamma = 90
   else
       if xyzpbc .eq. yes then
           set alpha = 90
           set beta = 90
           set gamma = 90
           set XTLtype = ORTHorhombic
       else
           set alpha = 90
           set beta = 90
           set gamma = 90
           set XTLtype = ORTHorhombic
       endif
   endif

   write title unit 90
   * set XTLTYPE = @XTLtype
   * set alpha = @alpha
   * set beta = @beta
   * set gamma = @gamma
   * set A = @{A}
   * set B = @{B}
   * set C = @{C}
   *

endif



